#+TITLE: A functional fuzzy finder

This section of the tutorial is all about building a fuzzy finder in a
functional style. Note that this implementation won't be especially
performant, but it will be fast enough for medium-sized inputs.

You'll notice there are three subdirectories.

- ~src~ contains the vast majority of the source code for the command
  line tool, packaged up as a library. We package it as a library to
  make testing easier.
- ~bin~ contains a ~main.ml~ that is for building the executable.
- ~test~ is for writing tests against the library we built.

* Running the example code

The example starts out in a working state, but without much
functionality.  You can invoke it as follows to see what it does:

#+BEGIN_EXAMPLE
dune build bin/main.exe
seq 0 1000 | dune exec ./bin/main.exe
#+END_EXAMPLE

You can run all the tests by writing:

#+BEGIN_EXAMPLE
dune runtest
#+END_EXAMPLE

For the expect tests, you can accept updates to the tests by running
this:

#+BEGIN_EXAMPLE
dune promote
#+END_EXAMPLE

Or by adding ~--auto-promote~ to the ~runtest~ invocation.

* Tasks

Here are steps you can do to turn this into a useful fuzzy finder.
You're not likely to get all of them, but you should see how far you
can get during the tutorial!

** Track time for reading stdin

The reading loop will send a ~Closed~ event when it's done reading
stdin. Use that to print out the time it takes from startup until
reading is done.

** Accept filter from user

You can accept a filter string from the user interactively by using
the incoming characters from the stream of user input. Use this to
filter down to a subset of messages.

This requires doing some basic line-editing, using the user input to
add or remove characters from the filter, and then displaying what
they've typed at a prompt you create.

At this point, you should simply return the first filtered message as
the selection.

** Display filtered messages to the user

You need to use the ~Widget~ module to create a display of the lines
that match. You'll need to also keep track of the dimensions of the
screen to only render enough lines to fit on screen, and to truncate
overly-long lines.

** Use arrow keys for choosing the selection

The real fzf lets you use the arrow keys to select from which of the
on-screen lines you actually want to select. This requires both adding
a little indicator of which line is currently selected, and
interpreting the arrow keys to move that indicator up and down.
Finally, you have to make sure to actually return the indicated line
as the current selection.

** Fuzzier finding

Instead of just looking for a substring, consider having a match be
any string that has the typed strings in some order.

** Add colors

This requires extending the ~tty_text~ library. The [[https://en.wikipedia.org/wiki/ANSI_escape_code][Wikipedia]] article
on ANSI escape codes explains how to color things. This would allow
you to highlight the current selection, or the subset of the filtered
lines that match the filter.
